// Generated by gencpp from file triangulator/triangulatorRequest.msg
// DO NOT EDIT!


#ifndef TRIANGULATOR_MESSAGE_TRIANGULATORREQUEST_H
#define TRIANGULATOR_MESSAGE_TRIANGULATORREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <triangulator/beaconSetting.h>

namespace triangulator
{
template <class ContainerAllocator>
struct triangulatorRequest_
{
  typedef triangulatorRequest_<ContainerAllocator> Type;

  triangulatorRequest_()
    : bSettings()
    , envLimits()  {
      envLimits.assign(0.0);
  }
  triangulatorRequest_(const ContainerAllocator& _alloc)
    : bSettings(_alloc)
    , envLimits()  {
      envLimits.assign(0.0);
  }



   typedef std::vector< ::triangulator::beaconSetting_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::triangulator::beaconSetting_<ContainerAllocator> >::other >  _bSettings_type;
  _bSettings_type bSettings;

   typedef boost::array<float, 6>  _envLimits_type;
  _envLimits_type envLimits;




  typedef boost::shared_ptr< ::triangulator::triangulatorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::triangulator::triangulatorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct triangulatorRequest_

typedef ::triangulator::triangulatorRequest_<std::allocator<void> > triangulatorRequest;

typedef boost::shared_ptr< ::triangulator::triangulatorRequest > triangulatorRequestPtr;
typedef boost::shared_ptr< ::triangulator::triangulatorRequest const> triangulatorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::triangulator::triangulatorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::triangulator::triangulatorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace triangulator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'triangulator': ['/home/gbrill/catkin_ws/src/triangulator_service/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::triangulator::triangulatorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::triangulator::triangulatorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::triangulator::triangulatorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::triangulator::triangulatorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::triangulator::triangulatorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::triangulator::triangulatorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::triangulator::triangulatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac26a85416d29020a9d3e04a1dce714c";
  }

  static const char* value(const ::triangulator::triangulatorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac26a85416d29020ULL;
  static const uint64_t static_value2 = 0xa9d3e04a1dce714cULL;
};

template<class ContainerAllocator>
struct DataType< ::triangulator::triangulatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "triangulator/triangulatorRequest";
  }

  static const char* value(const ::triangulator::triangulatorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::triangulator::triangulatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beaconSetting[] bSettings\n\
\n\
\n\
float32[6] envLimits\n\
\n\
================================================================================\n\
MSG: triangulator/beaconSetting\n\
float32 beaconID\n\
string beaconName\n\
float32 X\n\
float32 Y\n\
float32 Z\n\
";
  }

  static const char* value(const ::triangulator::triangulatorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::triangulator::triangulatorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bSettings);
      stream.next(m.envLimits);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct triangulatorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::triangulator::triangulatorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::triangulator::triangulatorRequest_<ContainerAllocator>& v)
  {
    s << indent << "bSettings[]" << std::endl;
    for (size_t i = 0; i < v.bSettings.size(); ++i)
    {
      s << indent << "  bSettings[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::triangulator::beaconSetting_<ContainerAllocator> >::stream(s, indent + "    ", v.bSettings[i]);
    }
    s << indent << "envLimits[]" << std::endl;
    for (size_t i = 0; i < v.envLimits.size(); ++i)
    {
      s << indent << "  envLimits[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.envLimits[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRIANGULATOR_MESSAGE_TRIANGULATORREQUEST_H
