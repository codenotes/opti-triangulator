// Generated by gencpp from file triangulator/triangulatorCommandRequest.msg
// DO NOT EDIT!


#ifndef TRIANGULATOR_MESSAGE_TRIANGULATORCOMMANDREQUEST_H
#define TRIANGULATOR_MESSAGE_TRIANGULATORCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <triangulator/beaconCommand.h>

namespace triangulator
{
template <class ContainerAllocator>
struct triangulatorCommandRequest_
{
  typedef triangulatorCommandRequest_<ContainerAllocator> Type;

  triangulatorCommandRequest_()
    : triCommand()  {
    }
  triangulatorCommandRequest_(const ContainerAllocator& _alloc)
    : triCommand(_alloc)  {
    }



   typedef  ::triangulator::beaconCommand_<ContainerAllocator>  _triCommand_type;
  _triCommand_type triCommand;




  typedef boost::shared_ptr< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct triangulatorCommandRequest_

typedef ::triangulator::triangulatorCommandRequest_<std::allocator<void> > triangulatorCommandRequest;

typedef boost::shared_ptr< ::triangulator::triangulatorCommandRequest > triangulatorCommandRequestPtr;
typedef boost::shared_ptr< ::triangulator::triangulatorCommandRequest const> triangulatorCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::triangulator::triangulatorCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace triangulator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'triangulator': ['/home/gbrill/catkin_ws/src/triangulator/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4efcc9bd9e730dfb6fe72d75ce213c4c";
  }

  static const char* value(const ::triangulator::triangulatorCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4efcc9bd9e730dfbULL;
  static const uint64_t static_value2 = 0x6fe72d75ce213c4cULL;
};

template<class ContainerAllocator>
struct DataType< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "triangulator/triangulatorCommandRequest";
  }

  static const char* value(const ::triangulator::triangulatorCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beaconCommand triCommand\n\
\n\
================================================================================\n\
MSG: triangulator/beaconCommand\n\
uint32 commandID\n\
uint32 returnCode\n\
string commandMessage\n\
float32[] floatArgs\n\
int32[] intArgs\n\
string[] stringArgs\n\
";
  }

  static const char* value(const ::triangulator::triangulatorCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.triCommand);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct triangulatorCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::triangulator::triangulatorCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::triangulator::triangulatorCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "triCommand: ";
    s << std::endl;
    Printer< ::triangulator::beaconCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.triCommand);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRIANGULATOR_MESSAGE_TRIANGULATORCOMMANDREQUEST_H
